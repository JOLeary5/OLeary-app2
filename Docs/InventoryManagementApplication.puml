@startuml
'https://plantuml.com/class-diagram
GUIController<-InventoryManagementApplication
GUIController-->saveItemList
GUIController-->loadItemList
GUIController->AddItemController
GUIController->EditItemController
ItemList->GUIController
Item->ItemList

class AddItemController{
This class will contain the controller for the
Add item Screen
 - createItemAction()
 - productNumberMatchCheck()
 - setParentController()
}
class EditItemController{
This class will contain the controller for the
Edit item Screen
 - editItemAction()
 - productNumberMatchCheck()
 - setParentController()
}
class InventoryManagementApplication{
This is the Entry point for the Application

-main();
}

class GUIController{
This class will be the main body of
my program and will control the GUI Controls

 - initialize()
 - addItemAction()
 - editItemAction()
 - deleteItemAction()
 - clearItemListAction()
 - sortByValueAction()
 - sortSerialNumberAction()
 - saveItemsAction()
 - loadItemsAction()
 - openUserGuide1Action()
 - openUserGuide2Action()
}

class ItemList{
This is the object which stores a
list of items

 - Item currentItem
 - ObservableList<Item> ItemList.
 - addItem();
}

class Item{

   this is the item Object that
   will be stored in the ItemList
   Class.

 - Double Value;
 - Formatted String serialNumber;
 - String itemName;

 -setItemValue();
 -getItemValue();
 -setItemSerialNumber();
 -getItemSerialNumber();
 -setItemName();
 -getItemName();
 -Item();
}

class saveItemList{
Takes the Current Item Lists and saves
it to a file of a users choosing
 -saveTSB()
 -saveHTML()
 -saveJSON()
 -setParentController()
 }

class loadItemList{
Takes the Current Item Lists and saves
it to a file of a users choosing
  -loadTSB()
  -loadHTML()
  -loafJSON()
  -setParentController()
}

@enduml